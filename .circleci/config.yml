# version: 2.1

# setup: true

# orbs:
#   path-filtering: circleci/path-filtering@0.0.1

# workflows:
#   setup-workflow:
#     jobs:
#       - path-filtering/filter:
#           mapping: |
#             back/.* build-back true
#             front/.* build-front true
#           base-revision: origin/back-test
version: 2.1

setup: true

orbs:
  path-filtering: circleci/path-filtering@0.1.3

jobs:
  generate-config:
    executor: base
    steps:
      - checkout
      - path-filtering/set-parameters:
          # base-revision: paths-tags-combo
          mapping: |
            back/.* build-back true
            front/.* build-front true
      - run:
          name: check json
          command: |
            cat /tmp/pipeline-parameters.json
      # - run: 
      #     name: check tags
      #     command: |
      #       echo "PR Number is ${CIRCLE_PULL_REQUEST##*/}"

      #       FINAL_CONFIG_PATH=".circleci/continuation.yml"

      #       LABELS=`curl \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer $GH_TOKEN" \
      #         https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${CIRCLE_PULL_REQUEST##*/}/labels`

      #       ISSUE_CALL=`echo $LABELS | jq -c '.[]'`

      #       echo "{" > tmp.json

      #       if [[ -z ${CIRCLE_PULL_REQUEST} ]]; then
      #         echo "no PR is open"
      #         FINAL_CONFIG_PATH=".circleci/continuation.yml"
      #       elif [[ -z ${ISSUE_CALL} ]]; then
      #         echo "PR is open, but no labels on this issue"
      #         FINAL_CONFIG_PATH=".circleci/labels/labels.yml"
      #       else
      #         echo "found labels on this issue"
      #         echo $ISSUE_CALL | while read i; do 
      #           echo $i | jq '.name' | while read x; do
      #             echo ""$x": true," >> tmp.json 
      #           done
      #             sed -i.bak '$ s/.$//' tmp.json
      #         done
      #         FINAL_CONFIG_PATH=".circleci/labels/labels.yml"
      #       fi

      #       echo "}" >> tmp.json

      #       rm -rf tmp.json.bak

      #       jq -n\
      #         --arg continuation "$CIRCLE_CONTINUATION_KEY" \
      #         --arg config "$(cat $FINAL_CONFIG_PATH)" \
      #         --arg params "$(jq --raw-output '@json' tmp.json)" \
      #         '{"continuation-key": $continuation, "configuration": $config, "parameters": $params|fromjson}' | tee /tmp/continue-body.json
      # - run: 
      #     name: continue API call
      #     command: |
      #       curl --request POST \
      #         --url https://circleci.com/api/v2/pipeline/continue \
      #         --header 'content-type: application/json' \
      #         --data-binary @/tmp/continue-body.json

workflows:
  setup-workflow:
    jobs:
      - generate-config

executors:
  base:
    docker:
      - image: cimg/base:stable

# VS Code Extension Version: 1.0.0